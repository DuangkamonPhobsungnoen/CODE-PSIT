"""[Midterm] Turnstile"""
def main():
    """[Midterm] Turnstile"""
    text_1 = '' #เวลาจะสร้างตัวแปรในloopต้องกำหนดค่าก่อน
    text_2 = ''
    total = 0
    while text_1 != 'END':
        text_1 = input()
        text_2 += text_1
        total = text_2.count('CP')
    print(total)
main()

# Turnstile เป็นเครื่องจักรที่ใช้เป็นการควบคุมการเข้าออก และมีแขน 3 แขน สูงบริเวณเอว เพื่อกันไม่ให้คนเดินผ่าน สถานะเริ่มต้นของแขนจะเป็นสถานะ 
# Locked ดังนั้นผู้ต้องการจะเดินผ่าน ต้องทำการจ่ายเงินก่อนเพื่อเปลี่ยนสถานะของแขนให้เป็น Unlocked จึงจะสามารถผลักแขนและเดินผ่านไปได้ เมื่อเดินผ่านไปแล้ว 
# แขนก็กลับมาอยู่ในสถานะ Locked อีกครั้ง ทำให้เดินผ่านได้ทีละคนเท่านั้น

# เมื่อพิจารณาเป็น state machine เครื่อง Turnstile นี้จะมีสถานะอยู่ 2 สถานะ คือ Locked และ Unlocked และมี action หรือการกระทำที่สามารถกระทำกับ 
# Turnstile ได้ 2 แบบคือ coin (ใส่เหรียญที่เครื่อง Turnstile) และ push (ผลักแขนเพื่อจะได้เดินผ่าน) เท่านั้น เมื่ออยู่ในสถานะ Locked การทำ ​action push 
# ไม่ว่าจะกี่ครั้งก็จะทำให้ Turnstile อยู่ในสถานะ Locked เสมอ การเปลี่ยนจากสถานะ Locked เป็น Unlocked ทำได้โดยการทำ action coin เท่านั้น ในทางกลับกัน 
# เมื่ออยู่ในสถานะ Unlocked การทำ action coin ไม่ว่าจะกี่ครั้ง ก็จะทำให้ Turnstile อยู่ในสถานะ Unlocked เหมือนเดิมเสมอ การเปลี่ยนสถานะกลับไปเป็น Locked
# ทำได้โดยการทำ action push เพื่อผลักแขน และเดินผ่านไป ดังนั้นคนที่จะเดินผ่านคนต่อไปจำเป็นต้องใส่เหรียญที่ Turnstile อีกครั้ง เพื่อจะผลักแขนและเดินผ่านได้เป็นคนต่อไป

# เครื่อง Turnstile สามารถเขียนอธิบายได้ด้วย state transition table ซึ่งแแสดงได้ดังตารางด้านล่างนี้ นอกจากนี้ยังสามารถเขียนโดยใช้กราฟด้านล่างเช่นกัน

# คุณได้รับข้อความบันทึก (log) การทำ action ใช้งานเครื่อง Turnstile มาในรูปแบบที่ตัวอักษร P แสดง action push และ C แสดง action coin 
# ให้คุณนับว่ามีผู้เดินผ่าน Turnstile นี้กี่คน จากข้อมูล log ที่ได้มา กำหนดให้ initial state ของเครื่อง Turnstile นี้อยู่สถานะ Locked ก่อนที่จะมีการเริ่มบันทึก log นี้

# Ref: https://en.wikipedia.org/wiki/Finite-state_machine

# P
# P
# P
# C
# C
# P
# C
# END
# 1
# C
# P
# P
# C
# P
# P
# END
# 2
# C
# C
# P
# C
# P
# C
# P
# P
# END
# 3
# P
# P
# P
# P
# END
# 0